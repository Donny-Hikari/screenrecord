#!/bin/bash

# AUTHOR: Donny (c) 2018
# NAME: ScreenRecord 0.1.8
# DESCRIPTION:  A shell script for recording screen under linux.
# DEPENDENCIES:   ffmpeg, notify-send (optional)

# App name, display when pushing notification
APPNAME="ScreenRecord"

ERR_NONE=0
ERR_UNRECOGNIZED_PARAMETERS=1
ERR_MISSING_PARAMETERS=2
ERR_OPERATION_FAILED=3
ERR_WRONG_PARAMETERS=4

declare -A ERRINFO
ERRINFO[$ERR_NONE]=""
ERRINFO[$ERR_UNRECOGNIZED_PARAMETERS]="Unrecognized parameters"
ERRINFO[$ERR_MISSING_PARAMETERS]="Missing parameters"
ERRINFO[$ERR_OPERATION_FAILED]="Operation failed"
ERRINFO[$ERR_WRONG_PARAMETERS]="Wrong parameters"

HELP_HINT="Try -h or --help to get help infomation."

# Delay before starting
DELAY=3
# Capture mode, one of "window"|"screen"|WxH+X+Y; default: "window"
CAPTUREMODE="window"
# Whether to display ui notification or not
UINOTIFY=1
# Preview the settings only. Not doing actual recording
PREVIEWONLY=0
# Config filename, settings in the config file will be loaded,
# but covered by the new parameters given
CONFIGFILE=

# Recording duration; default: 0 - keep recording until user press 'q'
DURATION=0
# Recording frame rate
FRAMERATE=30
# Recording scale
SCALE=-1:-1
# Time and date
TIME=$(date +"%Y-%m-%d_%H-%M-%S")
# Default output filename
DEFNAME=ScreenRecord_$TIME.mp4
# Output filename
OUTPUTNAME=$HOME/Pictures/$DEFNAME
# Whether to output video file or not.
# If both $OUTPUTVIDEO and $OUTPUTWEBP are zeros, a video will be outputed by default.
OUTPUTVIDEO=0
# Whether to output webp file or not
OUTPUTWEBP=0
# Options placed before in stream when recording; default: None
INOPTIONS=
# Options placed before out stream when recording; default: None
OUTOPTIONS=

# Recoding geometry
X=0
Y=0
W=0
H=0

print_info() {
    echo ""
    echo "ScreenRecord - Record screen to video or webp file"
    echo "Author: Donny (c) 2018"
    echo "Version: 0.1.8"
    echo ""
}

print_usage() {
    PRINT_FORMAT="%-29s%s\n"

    echo "Usage: $(basename $0) [OPTIONS]"
    
    echo ""
    echo "Help options:"
    printf $PRINT_FORMAT "-h|--help"    "Print help options"

    echo ""
    echo "Behaviors options:"
    printf $PRINT_FORMAT "--delay number"               "delay \"number\" seconds before recording"
    printf $PRINT_FORMAT "-m|--capture-mode mode"       "set the capture mode; one of \"window\"|\"screen\"|WxH+X+Y; default: \"Window\""
    printf $PRINT_FORMAT "--noui"                       "suppress ui output, which means not using notify-send"
    printf $PRINT_FORMAT "--preview"                    "preview the parameters only, not doing actual recording"
    printf $PRINT_FORMAT "-c|--config-file filename"    "set config file; settings in the config file will be loaded, but covered by the new parameters given."

    echo ""
    echo "Recording options:"
    printf $PRINT_FORMAT "-o|--output filename"     "set the output filename; if not extension specified, a mp4 format video will be produced"
    printf $PRINT_FORMAT "-d|--duration number"     "record \"number\" seconds of video/webp; 0 means keep recording until user press 'q'"
    printf $PRINT_FORMAT "-f|--framerate number"    "set the recording frame rate"
    printf $PRINT_FORMAT "-s|scale widthxheight"    "scale the recording output to widthxheight"
    printf $PRINT_FORMAT "--webp"                    "output webp"
    printf $PRINT_FORMAT "--video"                  "output video; by default a video will be produced if neither --webp nor --video option is given"
    printf $PRINT_FORMAT "--options-in"             "set options placed before ffmpeg input stream when recording"
    printf $PRINT_FORMAT "--options-out"            "set options placed before ffmpeg output stream when recording"

    echo ""
    return
}

print_variables() {
    echo "====== PREVIEW PARAMETERS ======"
    echo "Delay: $DELAY"
    echo "Capture Mode: $CAPTUREMODE"
    echo "UI Notify: $UINOTIFY"
    echo "Preview: $PREVIEWONLY"
    echo "Config filename: $CONFIGFILE"
    echo ""
    echo "Output Filename: \"$OUTPUTNAME\""
    echo "Duration: $DURATION"
    echo "Framerate: $FRAMERATE"
    echo "Scale: $SCALE"
    echo "Output Webp: $OUTPUTWEBP"
    echo "Output Video: $OUTPUTVIDEO"
    echo "Input Stream Options: $INOPTIONS"
    echo "Output Stream Options: $OUTOPTIONS"
    echo ""
    echo "Recoding Geometry: ${W}x${H}+${X}+${Y} (WxH+X+Y)"
    echo ""
}

# Sound notification to let one know when recording is about to start (and ends)
beep() {
    paplay /usr/share/sounds/freedesktop/stereo/message-new-instant.oga &
}

# Text notification in both console and ui notification.
notify() {
    msg=$1; echo $msg;
    if [[ $UINOTIFY -eq 1 ]]; then
        notify-send $APPNAME "$msg"
    fi
}

isInteger() {
    regex='^[0-9]+$'
    if [[ $1 =~ $regex ]]; then
        return 1 # is integer
    else
        return 0 # not integer
    fi
}

# $1: option's name
# $2: error type
# $3: error detail
optionsError() {
    printf "%s: %s. %s\n" $1 "${ERRINFO[$2]}" "$3"
    echo $HELP_HINT
    exit $2
}

print_info

# Translate arguments
declare -a ALLARGUMENTS
declare -i index
ALLARGUMENTS=("$@")
index=0
for key in "${ALLARGUMENTS[@]}"
do
    if [[ "$key" == "-c" ]] || [[ "$key" == "--config-file" ]]; then
        CONFIGFILE="${ALLARGUMENTS[$((index+1))]}"
        ALLARGUMENTS=("${ALLARGUMENTS[@]:0:$index}" "${ALLARGUMENTS[@]:$((index+2))}")
        if [[ -z $CONFIGFILE ]]; then
            optionsError "--config-file" $ERR_MISSING_PARAMETERS
        else
            if ! [[ -f $CONFIGFILE ]]; then
                optionsError "--config-file" $ERR_WRONG_PARAMETERS "File \"$CONFIGFILE\" does not exist."
            fi
            while read -r line || [[ -n "$line" ]]; do
                read key < <( grep -Eo '^[[:alpha:][:digit:]-]*' <<< $line )
                options="${line:$((${#key}+1))}"
                # get rid of possible leading and tailing \"
                read options < <( sed -e 's/^\"\(.*\)\"$/\1/' <<< $options )
                key="--$key"
                if [[ -z $options ]]; then
                    ALLARGUMENTS=($key "${ALLARGUMENTS[@]}")
                else
                    ALLARGUMENTS=($key "$options" "${ALLARGUMENTS[@]}")
                fi
            done < "$CONFIGFILE"
        fi
        break
    fi
    index+=1
done

index=0
while [[ $index -lt ${#ALLARGUMENTS[@]} ]]
do
    key="${ALLARGUMENTS[$index]}"; index+=1
    case $key in
        # HELP OPTIONS
        -h|--help)
        print_usage
        exit $ERR_NONE
        ;;

        # BEHAVIORS OPTIONS
        --delay)
        next="${ALLARGUMENTS[$index]}"; index+=1
        isInteger $next
        if [[ $? -eq 0 ]]; then # not integer
            optionsError "--delay" $ERR_WRONG_PARAMETERS "A positive integer needed."
        fi
        if [[ $next -lt 0 ]]; then
            optionsError "--delay" $ERR_WRONG_PARAMETERS "A positive integer needed."
        fi
        DELAY=$next
        ;;
        -m|--capture-mode)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ -z $next ]]; then
            optionsError "--capture-mode" $ERR_MISSING_PARAMETERS
        else
            CAPTUREMODE=$next
        fi
        ;;
        --noui)
        UINOTIFY=0
        ;;
        --preview)
        PREVIEWONLY=1
        ;;

        # RECORDING OPTIONS
        -o|--output)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ -z $next ]]; then
            optionsError "--output" $ERR_MISSING_PARAMETERS "An output filename needed."
        else
            OUTPUTNAME=$next
            # If not filename given, use the $DEFNAME
            filename=${OUTPUTNAME##*/}
            if [[ -z $filename ]]; then
                OUTPUTNAME=${OUTPUTNAME}${DEFNAME}
            fi
        fi
        ;;
        -d|--duration)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ $next -gt 0 ]]; then
            DURATION=$next
        fi
        ;;
        -f|--framerate)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ $next -gt 0 ]]; then
            FRAMERATE=$next
        fi
        ;;
        -s|--scale)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ -z $next ]]; then
            optionsError "--scale" $ERR_MISSING_PARAMETERS "A scale rate needed."
        else
            SCALE=$next
        fi
        ;;
        --webp)
        OUTPUTWEBP=1
        ;;
        --video)
        OUTPUTVIDEO=1
        ;;
        --options-in)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ -z $next ]]; then
            optionsError "--options-in" $ERR_MISSING_PARAMETERS "Specify options for input stream needed."
        else
            INOPTIONS=$next
        fi
        ;;
        --options-out)
        next="${ALLARGUMENTS[$index]}"; index+=1
        if [[ -z $next ]]; then
            optionsError "--options-out" $ERR_MISSING_PARAMETERS "Specify options for output stream needed."
        else
            OUTOPTIONS=$next
        fi
        ;;
        *)
        optionsError "" $ERR_UNRECOGNIZED_PARAMETERS "$key"
        ;;
    esac
done

fileext=${OUTPUTNAME##*.}; if [[ "$fileext" == $OUTPUTNAME ]]; then fileext=""; fi
if [[ -z $fileext ]]; then
    if [[ $OUTPUTWEBP -eq 1 ]] && [[ $OUTPUTVIDEO -eq 0 ]]; then
        OUTPUTNAME+=".webp"
    else
        OUTPUTNAME+=".mp4"
        OUTPUTVIDEO=1 # Output video by default
    fi
elif [[ "$fileext" == "webp" ]]; then
    OUTPUTWEBP=1
    if [[ $OUTPUTVIDEO -eq 1 ]]; then
        OUTPUTNAME=${OUTPUTNAME%.*}.mp4
    fi
else
    OUTPUTVIDEO=1 # Output video by default
fi
# End translate arguments

# Determine capture mode
case $CAPTUREMODE in
    "Window"|"window")
    # Window geometry
    echo "Please select the window you'd like to record by clicking the mouse in that window."
    echo ""
    XWININFO=$(xwininfo)
    read X < <(awk -F: '/Absolute upper-left X/{print $2}' <<< "$XWININFO")
    read Y < <(awk -F: '/Absolute upper-left Y/{print $2}' <<< "$XWININFO")
    read W < <(awk -F: '/Width/{print $2}' <<< "$XWININFO")
    read H < <(awk -F: '/Height/{print $2}' <<< "$XWININFO")
    ;;
    "Screen"|"screen")
    XRANDR=$(xrandr)
    X=0; Y=0
    read RESOLUTION < <(grep -Eo 'current [[:digit:]]+ x [[:digit:]]+' <<< "$XRANDR")
    read W < <(grep -Eo '[[:digit:]]+' <<< "$RESOLUTION" | sed -n '1p')
    read H < <(grep -Eo '[[:digit:]]+' <<< "$RESOLUTION" | sed -n '2p')
    ;;
    *)
    read X < <(grep -Eo '[[:digit:]]+' <<< "$CAPTUREMODE" | sed -n '3p')
    read Y < <(grep -Eo '[[:digit:]]+' <<< "$CAPTUREMODE" | sed -n '4p')
    read W < <(grep -Eo '[[:digit:]]+' <<< "$CAPTUREMODE" | sed -n '1p')
    read H < <(grep -Eo '[[:digit:]]+' <<< "$CAPTUREMODE" | sed -n '2p')
    ;;
esac

# Preview parameters only
if [[ $PREVIEWONLY -eq 1 ]]; then
    print_variables
    exit $ERR_NONE
fi

if [[ $DURATION -eq 0 ]]; then
    DURATION=
else
    DURATION="-t $DURATION"
fi

# Check file existance
if [[ -f $OUTPUTNAME ]]; then
    printf "File \"$OUTPUTNAME\" already exists. Override? [y/n]"
    read k
    if [[ "$k" != 'y' ]] && [[ "$k" != 'Y' ]]; then
        exit $ERR_NONE
    else
        rm $OUTPUTNAME
        if [[ $? -ne 0 ]]; then
            echo "Fail to override file \"$OUTPUTNAME\"."
            exit $ERR_OPERATION_FAILED
        fi
    fi
fi

# Notify the user of recording delay
notify "Recording will start in $DELAY seconds."
echo ""

# Actual recording
sleep $DELAY
beep
ffmpeg -video_size ${W}x${H} -framerate $FRAMERATE -f x11grab $INOPTIONS -i :0.0+${X},${Y} $DURATION -vf "scale=$SCALE" $OUTOPTIONS "$OUTPUTNAME"
result=$?
beep

if [[ $result -ne 0 ]]; then
    notify "Screen record of $OUTPUTNAME failed."
    exit $ERR_OPERATION_FAILED
fi

# Convert to webp
if [[ $OUTPUTWEBP -eq 1 ]] && [[ $OUTPUTVIDEO -eq 1 ]]; then
    ffmpeg -i "$OUTPUTNAME" "${OUTPUTNAME%.*}.webp"
fi

# Notify the user of end of recording.
notify "Screen record saved to $OUTPUTNAME"

exit $ERR_NONE
